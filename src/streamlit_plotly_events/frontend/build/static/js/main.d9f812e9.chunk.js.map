{"version":3,"sources":["StreamlitPlotlyEventsComponent.tsx","index.tsx"],"names":["StreamlitPlotlyEventsComponent","StreamlitComponentBase","constructor","arguments","state","data","layout","frames","config","render","plot_obj","JSON","parse","this","props","args","override_height","override_width","click_event","select_event","hover_event","with_z","Streamlit","setFrameHeight","React","createElement","Plot","onClick","plotlyEventHandler","undefined","onSelected","onHover","style","width","height","className","getPoint","points","traceIndex","curveNumber","pointIndex","pointNumber","marker","color","setState","clickedPoints","forEach","arrayItem","push","x","y","z","setComponentValue","stringify","componentDidMount","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"+MASA,MAAMA,UAAuCC,IAAuBC,cAAA,SAAAC,WAClE,KACAC,MAAQ,CACNC,KAAM,GACNC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,IACR,KAYKC,OAAS,KAEd,IAAIC,EAAWC,KAAKC,MAAMC,KAAKC,MAAMC,KAAe,UASpD,MAAMC,EAAkBH,KAAKC,MAAMC,KAAsB,gBACnDE,EAAiBJ,KAAKC,MAAMC,KAAqB,eAGjDG,EAAcL,KAAKC,MAAMC,KAAkB,YAC3CI,EAAeN,KAAKC,MAAMC,KAAmB,aAC7CK,EAAcP,KAAKC,MAAMC,KAAkB,YAC3CM,EAASR,KAAKC,MAAMC,KAAa,OAGvC,OADAO,IAAUC,eAAeP,GAEvBQ,IAAAC,cAACC,IAAI,CACHrB,KAAMQ,KAAKT,MAAMC,KACjBC,OAAQO,KAAKT,MAAME,OACnBE,OAAQK,KAAKT,MAAMI,OACnBD,OAAQM,KAAKT,MAAMG,OACnBoB,QAAST,EAAcL,KAAKe,mBAAmBP,EAAQX,QAAYmB,EACnEC,WAAYX,EAAeN,KAAKe,mBAAmBP,QAAUQ,EAC7DE,QAASX,EAAcP,KAAKe,mBAAmBP,QAAUQ,EACzDG,MAAO,CAAEC,MAAOhB,EAAgBiB,OAAQlB,GACxCmB,UAAU,mBAKc,KACtBP,mBAAqB,CAACP,EAAiBX,IAGrCL,IACN,MAeM+B,EAAW/B,EAAKgC,OAAO,GACvBC,EAAaF,EAASG,YACtBC,EAAaJ,EAASK,YAU5B/B,EAASL,KAAKiC,GAAYI,OAAOC,MAAMH,GAAc,MAErD3B,KAAK+B,SAAS,CACZvC,KAAKK,EAASL,OAIhB,IAAIwC,EAA4B,GAChCxC,EAAKgC,OAAOS,SAAQ,SAAUC,GACxB1B,EACFwB,EAAcG,KAAK,CACjBC,EAAGF,EAAUE,EACbC,EAAGH,EAAUG,EACbC,EAAGJ,EAAUI,EACbZ,YAAaQ,EAAUR,YACvBE,YAAaM,EAAUN,YACvBD,WAAYO,EAAUP,aAGxBK,EAAcG,KAAK,CACjBC,EAAGF,EAAUE,EACbC,EAAGH,EAAUG,EACbX,YAAaQ,EAAUR,YACvBE,YAAaM,EAAUN,YACvBD,WAAYO,EAAUP,gBAM5BlB,IAAU8B,kBAAkBzC,KAAK0C,UAAUR,KA5G/CS,oBACE,IAAI5C,EAAWC,KAAKC,MAAMC,KAAKC,MAAMC,KAAe,UACpDF,KAAK+B,SAAS,CACZvC,KAAMK,EAASL,KACfC,OAAQI,EAASJ,OACjBC,OAAQG,EAASH,OACjBC,OAAQE,EAASF,UA2GR+C,kBAAwBvD,GC/HvCwD,IAAS/C,OACPe,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAACzB,EAA8B,OAEjC0D,SAASC,eAAe,U","file":"static/js/main.d9f812e9.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport Plot from 'react-plotly.js';\nimport { trace } from \"console\";\n\nclass StreamlitPlotlyEventsComponent extends StreamlitComponentBase {\n  // Create state for points\n  state = {\n    data: [],\n    layout: {},\n    frames: [],\n    config: {}\n  };\n\n  componentDidMount() {\n    var plot_obj = JSON.parse(this.props.args[\"plot_obj\"]);\n    this.setState({\n      data: plot_obj.data,\n      layout: plot_obj.layout,\n      frames: plot_obj.frames,\n      config: plot_obj.config\n    });\n  }\n\n  public render = (): ReactNode => {\n    // Pull Plotly object from args and parse\n    var plot_obj = JSON.parse(this.props.args[\"plot_obj\"]);\n\n    // this.setState({\n    //   data: plot_obj.data,\n    //   layout: plot_obj.layout,\n    //   frames: plot_obj.frames,\n    //   config: plot_obj.config,\n    // })\n\n    const override_height = this.props.args[\"override_height\"];\n    const override_width = this.props.args[\"override_width\"];\n\n    // Event booleans\n    const click_event = this.props.args[\"click_event\"];\n    const select_event = this.props.args[\"select_event\"];\n    const hover_event = this.props.args[\"hover_event\"];\n    const with_z = this.props.args[\"with_z\"];\n\n    Streamlit.setFrameHeight(override_height);\n    return (\n      <Plot\n        data={this.state.data}\n        layout={this.state.layout}\n        config={this.state.config}\n        frames={this.state.frames}\n        onClick={click_event ? this.plotlyEventHandler(with_z, plot_obj) : undefined}\n        onSelected={select_event ? this.plotlyEventHandler(with_z) : undefined}\n        onHover={hover_event ? this.plotlyEventHandler(with_z) : undefined}\n        style={{ width: override_width, height: override_height }}\n        className=\"stPlotlyChart\"\n      />\n    );\n  };\n\n  /** Click handler for plot. */\n  private plotlyEventHandler = (with_z: boolean, plot_obj?: any) => {\n\n    // console.log('pressed on point')\n    return (data: any) => {\n      const getCircularReplacer = () => {\n        const seen = new WeakSet();\n        return (key: string, value: any) => {\n          if (typeof value === \"object\" && value !== null) {\n            if (seen.has(value)) {\n              return '[Circular]';\n            }\n            seen.add(value);\n          }\n          return value;\n        };\n      };\n      // JSON.parse(data.points[0])\n      // console.log('pressed on point', JSON.stringify(data.points[0], getCircularReplacer(), 2))\n      // console.log('current plot object', plot_obj)\n      const getPoint = data.points[0]\n      const traceIndex = getPoint.curveNumber\n      const pointIndex = getPoint.pointNumber\n\n      // console.log(plot_obj)\n      // console.log('current point number:', pointIndex)\n      // console.log('current trace number', traceIndex)\n      // console.log('current colors: ', plot_obj.data[traceIndex].marker.color[pointIndex])\n      // console.log('current point size',plot_obj.data[traceIndex].marker)\n      // set the color by modifying the state of data here\n\n      // const newData = plot_obj\n      plot_obj.data[traceIndex].marker.color[pointIndex] = 'red'\n      \n      this.setState({\n        data:plot_obj.data\n      })\n      \n      // Build array of points to return\n      var clickedPoints: Array<any> = [];\n      data.points.forEach(function (arrayItem: any) {\n        if (with_z) {\n          clickedPoints.push({\n            x: arrayItem.x,\n            y: arrayItem.y,\n            z: arrayItem.z,\n            curveNumber: arrayItem.curveNumber,\n            pointNumber: arrayItem.pointNumber,\n            pointIndex: arrayItem.pointIndex\n          });\n        } else {\n          clickedPoints.push({\n            x: arrayItem.x,\n            y: arrayItem.y,\n            curveNumber: arrayItem.curveNumber,\n            pointNumber: arrayItem.pointNumber,\n            pointIndex: arrayItem.pointIndex\n          });\n        }\n      });\n\n      // Return array as JSON to Streamlit\n      Streamlit.setComponentValue(JSON.stringify(clickedPoints));\n    };\n  };\n}\n\nexport default withStreamlitConnection(StreamlitPlotlyEventsComponent);","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlotlyEventsComponent from \"./StreamlitPlotlyEventsComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlotlyEventsComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}