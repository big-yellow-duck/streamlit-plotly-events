{"version":3,"sources":["StreamlitPlotlyEventsComponent.tsx","index.tsx"],"names":["StreamlitPlotlyEventsComponent","StreamlitComponentBase","constructor","arguments","state","data","layout","clickedPoints","x","y","z","measureMode","measurePoints","render","plot_obj","JSON","parse","this","props","args","override_height","override_width","plotClickedPoint","clickedPointSize","click_event","select_event","hover_event","with_z","Streamlit","setFrameHeight","React","createElement","Plot","onClick","plotlyEventHandler","undefined","onSelected","onHover","style","width","height","className","plot_clicked_point","clicked_point_size","currentClickedPoint","points","previousClickedPointState","needToUpdate","console","log","setState","getPoint","curveNumber","pointNumber","clickPointPlot","mode","marker","color","showlegend","type","name","text","hovertemplate","concat","toFixed","size","length","push","measurePlot","createMeasureLine","updatePlotState","forEach","arrayItem","pointIndex","setComponentValue","stringify","dx","Math","abs","dy","dz","dxyz","sqrt","pow","dxy","dxz","dyz","line","plot_data","componentDidMount","measure_mode","uirevision","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69612390.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport Plot from 'react-plotly.js';\n\ninterface MyState {\n  data: any[];\n  layout: any;\n  clickedPoints: { x: number; y: number; z: number };\n  measureMode: boolean;\n  measurePoints: any[];\n}\n\nclass StreamlitPlotlyEventsComponent extends StreamlitComponentBase<MyState> {\n  // Create state for points\n  state: MyState = {\n    data: [],\n    layout: {},\n    clickedPoints: { x: 0.0, y: 0.0, z: 0.0 },\n    measureMode: false,\n    measurePoints: [],\n\n  };\n\n  // init the component state when first starting it\n  // make the layout constant across updates\n  componentDidMount() {\n    let plot_obj = JSON.parse(this.props.args[\"plot_obj\"])\n    let measure_mode: boolean = this.props.args['measure_mode']\n    this.setState({\n      data: plot_obj.data,\n      layout: { uirevision: 'constant' },\n      clickedPoints: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      measureMode: measure_mode,\n      measurePoints: [],\n    });\n  }\n\n  public render = (): ReactNode => {\n    // Pull Plotly object from args and parse\n    var plot_obj = JSON.parse(this.props.args[\"plot_obj\"]);\n    const override_height = this.props.args[\"override_height\"];\n    const override_width = this.props.args[\"override_width\"];\n    const plotClickedPoint: boolean = this.props.args['plot_clicked_point']\n    /*Get the current point size of the chart we are plotting to draw the extra clicked point\n      with respect to the scale of the plotted points\n    */\n    const clickedPointSize: number = this.props.args['clicked_point_size']\n    // Event booleans\n    const click_event = this.props.args[\"click_event\"];\n    const select_event = this.props.args[\"select_event\"];\n    const hover_event = this.props.args[\"hover_event\"];\n    const with_z = this.props.args[\"with_z\"];\n\n    Streamlit.setFrameHeight(override_height);\n    return (\n      <Plot\n        data={this.state.data}\n        layout={this.state.layout}\n        // config={this.state.config}\n        // frames={this.state.frames}\n        onClick={click_event ? this.plotlyEventHandler(with_z, plot_obj, plotClickedPoint, clickedPointSize) : undefined}\n        onSelected={select_event ? this.plotlyEventHandler(with_z) : undefined}\n        onHover={hover_event ? this.plotlyEventHandler(with_z) : undefined}\n        style={{ width: override_width, height: override_height }}\n        className=\"stPlotlyChart\"\n      />\n    );\n  };\n\n  /** Click handler for plot. */\n  private plotlyEventHandler = (with_z: boolean, plot_obj?: any, plot_clicked_point?: boolean, clicked_point_size?: number) => {\n\n    // console.log('pressed on point')\n    return (data: any) => {\n      const getCircularReplacer = () => {\n        const seen = new WeakSet();\n        return (key: string, value: any) => {\n          if (typeof value === \"object\" && value !== null) {\n            if (seen.has(value)) {\n              return '[Circular]';\n            }\n            seen.add(value);\n          }\n          return value;\n        };\n      };\n      // JSON.parse(data.points[0])\n      // console.log('pressed on point', JSON.stringify(data.points[0], getCircularReplacer(), 2))\n      // console.log('current plot object', plot_obj)\n      let currentClickedPoint = data.points[0]\n      let previousClickedPointState = this.state.clickedPoints\n      let needToUpdate = false\n      if (currentClickedPoint.x !== previousClickedPointState.x ||\n        currentClickedPoint.y !== previousClickedPointState.y ||\n        currentClickedPoint.z !== previousClickedPointState.z) {\n        console.log('clicked point x diff')\n        needToUpdate = true\n        this.setState({\n          clickedPoints: {\n            x: currentClickedPoint.x,\n            y: currentClickedPoint.y,\n            z: currentClickedPoint.z,\n          }\n        })\n      } else {\n        needToUpdate = false\n      }\n\n      // console.log('state point: ', this.state.clickedPoints)\n      // console.log('clicked point: ',  currentClickedPoint.x)\n      if (plot_clicked_point && needToUpdate === true) {\n\n        const getPoint = data.points[0]\n        const traceIndex = getPoint.curveNumber\n        const pointIndex = getPoint.pointNumber\n        console.log(`current getPoint:`, getPoint)\n        // console.log('current point number:', pointIndex)\n        // console.log('current trace number', traceIndex)\n        // console.log('current colors: ', plot_obj.data[traceIndex].marker.color[pointIndex])\n        // console.log('current data for plot', this.state.data)\n\n        // console.log('plot_obj', plot_obj)\n        // create a point object to add to our current plot to indicate the clicked point\n        interface newPoint {\n          x: number[];\n          y: number[];\n          z?: number[];\n          mode: string;\n          marker: {\n            color: string;\n            size?: number;\n          };\n          showlegend: boolean;\n          type: string;\n          name: string,\n          text: string[],\n          hovertemplate: string,\n        }\n\n        let clickPointPlot: newPoint = {\n          x: [getPoint.x],\n          y: [getPoint.y],\n          z: [getPoint.z],\n          mode: 'markers',\n          marker: {\n            color: 'red',\n            // size: clicked_point_size === 0.0 && undefined? 5.0: clicked_point_size*1.5,\n          },\n          showlegend: false,\n          type: getPoint.z !== undefined ? 'scatter3d' : 'scatter',\n          name: 'Clicked Point',\n          text: ['Clicked Point'],\n          hovertemplate: '<b>%{text}</b><br>'\n            + `<b>x: ${getPoint.x.toFixed(3)}</b><br>`\n            + `<b>y: ${getPoint.y.toFixed(3)}</b><br>`\n            + `<b>z: ${getPoint.z.toFixed(3)}</b><extra></extra>`\n\n        };\n\n        if (clicked_point_size !== undefined) {\n          clickPointPlot.marker.size = clicked_point_size\n        }\n        else {\n          clickPointPlot.marker.size = 5.0\n        }\n\n\n        // calculate measure points and plot them on the chart\n        if (this.state.measureMode === true) {\n          // let measurePoints = this.state.measurePoints\n          // measurePoints.push(clickPointPlot)\n          if (this.state.measurePoints.length >= 2) {\n            this.state.measurePoints.length = 0;\n            this.state.measurePoints.push(clickPointPlot)\n          }\n          else {\n            this.state.measurePoints.push(clickPointPlot)\n          }\n          // calculate measure points when the length is 2 then plot on the chart\n          if (this.state.measurePoints.length === 2) {\n            const measurePoints = this.state.measurePoints\n\n            const measurePlot = this.createMeasureLine(measurePoints)\n            measurePoints.push(...measurePlot)\n          }\n\n          console.log('measure points: ', this.state.measurePoints)\n        }\n        // update the plot \n        // append new trace of clicked point here then update plot state\n        if (this.state.measureMode === true) {\n          plot_obj.data.push(...this.state.measurePoints)\n        }\n        else {\n          plot_obj.data.push(clickPointPlot)\n        }\n        console.log('plotting using: ', plot_obj)\n        this.updatePlotState(plot_obj)\n      }\n\n      // Build array of points to return\n      if (needToUpdate === true) {\n        let clickedPoints: Array<any> = [];\n        data.points.forEach(function (arrayItem: any) {\n          if (with_z) {\n            clickedPoints.push({\n              x: arrayItem.x,\n              y: arrayItem.y,\n              z: arrayItem.z,\n              curveNumber: arrayItem.curveNumber,\n              pointNumber: arrayItem.pointNumber,\n              pointIndex: arrayItem.pointIndex\n            });\n          } else {\n            clickedPoints.push({\n              x: arrayItem.x,\n              y: arrayItem.y,\n              curveNumber: arrayItem.curveNumber,\n              pointNumber: arrayItem.pointNumber,\n              pointIndex: arrayItem.pointIndex\n            });\n          }\n        });\n\n        // Return array as JSON to Streamlit\n        Streamlit.setComponentValue(JSON.stringify(clickedPoints));\n      }\n\n    };\n  };\n  private createMeasureLine = (measurePoints: any) => {\n    const dx = Math.abs(measurePoints[1].x - measurePoints[0].x)\n    const dy = Math.abs(measurePoints[1].y - measurePoints[0].y)\n    const dz = Math.abs(measurePoints[1].z - measurePoints[0].z)\n    const dxyz = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2))\n\n    const dxy = Math.sqrt(dx * dx + dy * dy);\n    const dxz = Math.sqrt(dx * dx + dz * dz);\n    const dyz = Math.sqrt(dy * dy + dz * dz);\n\n    // xyz measure line\n    const linexyz = {\n      x: [...measurePoints[0].x, ...measurePoints[1].x],\n      y: [...measurePoints[0].y, ...measurePoints[1].y],\n      z: [...measurePoints[0].z, ...measurePoints[1].z],\n      mode: 'lines',\n      line: {\n        color: 'purple',\n        width: 4,\n      },\n      type: 'scatter3d',\n      name: 'Distance',\n      text: [\"Point 1\", \"Point 2\"],\n      hovertemplate: \"<b>%{text}</b><br>\"\n        + `<b>Measured distance: ${dxyz.toFixed(3)}m</b><br>`\n        + `<b>ΔXY: ${dxy.toFixed(3)}</b><br>`\n        + `<b>ΔXZ: ${dxz.toFixed(3)}</b><br>`\n        + `<b>ΔYZ: ${dyz.toFixed(3)}</b><extra></extra>`\n    };\n\n    // x measure line\n    const linex = {\n      x: [...measurePoints[0].x, ...measurePoints[1].x],\n      y: [...measurePoints[0].y, ...measurePoints[0].y],\n      z: [...measurePoints[0].z, ...measurePoints[0].z],\n      mode: 'lines',\n      line: {\n        color: 'red',\n        width: 4,\n      },\n      type: 'scatter3d',\n      name: 'Distance X',\n      text: [\"Point 1\", \"Point 2\"],\n      hovertemplate: `<b>Measured distance X: ${dx.toFixed(3)}m</b><extra></extra>`\n    };\n\n    // xz measure line\n    const liney = {\n      x: [...measurePoints[1].x, ...measurePoints[1].x],\n      y: [...measurePoints[0].y, ...measurePoints[1].y],\n      z: [...measurePoints[0].z, ...measurePoints[0].z],\n      mode: 'lines',\n      line: {\n        color: 'green',\n        width: 4,\n      },\n      type: 'scatter3d',\n      name: 'Distance Y',\n      text: [\"Point 1\", \"Point 2\"],\n      hovertemplate: `<b>Measured distance Y: ${dy.toFixed(3)}m</b><extra></extra>`\n    };\n\n    // z meassure line\n    const linez = {\n      x: [...measurePoints[1].x, ...measurePoints[1].x],\n      y: [...measurePoints[1].y, ...measurePoints[1].y],\n      z: [...measurePoints[0].z, ...measurePoints[1].z],\n      mode: 'lines',\n      line: {\n        color: 'blue',\n        width: 4,\n      },\n      type: 'scatter3d',\n      name: 'Distance Z',\n      text: [\"Point 1\", \"Point 2\"],\n      hovertemplate: `<b>Measured distance X: ${dz.toFixed(3)}m</b><extra></extra>`\n    };\n    return (\n      [linexyz, linex, liney, linez]\n    )\n  }\n  private updatePlotState = (plot_data: any): void => {\n    this.setState({\n      data: plot_data.data,\n      // layout: plot_data.layout,\n      // config: this.state.config,\n      // frames: this.state.frames,\n\n    })\n  }\n}\n\nexport default withStreamlitConnection(StreamlitPlotlyEventsComponent);","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlotlyEventsComponent from \"./StreamlitPlotlyEventsComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlotlyEventsComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}