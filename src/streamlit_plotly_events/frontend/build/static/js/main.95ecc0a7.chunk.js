(this.webpackJsonpstreamlit_component_template=this.webpackJsonpstreamlit_component_template||[]).push([[0],{19:function(t,e,s){"use strict";s.r(e);var a=s(0),i=s.n(a),o=s(3),r=s.n(o),n=s(1),c=s(5),d=s.n(c);class h extends n.b{constructor(){super(...arguments),this.state={data:[],layout:{},clickedPoints:{x:0,y:0,z:0},measureMode:!1,measurePoints:[],measureLineWidth:0},this.render=()=>{var t=JSON.parse(this.props.args.plot_obj);const e=this.props.args.override_height,s=this.props.args.override_width,a=this.props.args.plot_clicked_point,o=(this.props.args.measure_line_width,this.props.args.clicked_point_size),r=this.props.args.click_event,c=this.props.args.select_event,h=this.props.args.hover_event,l=this.props.args.with_z;return n.a.setFrameHeight(e),i.a.createElement(d.a,{data:this.state.data,layout:this.state.layout,onClick:r?this.plotlyEventHandler(l,t,a,o):void 0,onSelected:c?this.plotlyEventHandler(l):void 0,onHover:h?this.plotlyEventHandler(l):void 0,style:{width:s,height:e},className:"stPlotlyChart"})},this.plotlyEventHandler=(t,e,s,a)=>i=>{let o=i.points[0],r=this.state.clickedPoints,c=!1;if(o.x!==r.x||o.y!==r.y||o.z!==r.z?(console.log("clicked point x diff"),c=!0,this.setState({clickedPoints:{x:o.x,y:o.y,z:o.z}})):c=!1,s&&!0===c){const t=i.points[0];t.curveNumber,t.pointNumber;console.log("current getPoint:",t);let s={x:[t.x],y:[t.y],z:[t.z],mode:"markers",marker:{color:"red"},showlegend:!1,type:void 0!==t.z?"scatter3d":"scatter",name:"Clicked Point",text:["Clicked Point"],hovertemplate:"<b>%{text}</b><br>"+"<b>x: ".concat(t.x.toFixed(3),"</b><br>")+"<b>y: ".concat(t.y.toFixed(3),"</b><br>")+"<b>z: ".concat(t.z.toFixed(3),"</b><extra></extra>")};if(s.marker.size=void 0!==a?a:5,!0===this.state.measureMode){if(this.state.measurePoints.length>=2?(this.state.measurePoints.length=0,this.state.measurePoints.push(s)):this.state.measurePoints.push(s),2===this.state.measurePoints.length){const t=this.state.measurePoints,e=this.createMeasureLine(t);t.push(...e)}console.log("measure points: ",this.state.measurePoints)}!0===this.state.measureMode?e.data.push(...this.state.measurePoints):e.data.push(s),console.log("plotting using: ",e),this.updatePlotState(e)}if(!0===c){let e=[];i.points.forEach((function(s){t?e.push({x:s.x,y:s.y,z:s.z,curveNumber:s.curveNumber,pointNumber:s.pointNumber,pointIndex:s.pointIndex}):e.push({x:s.x,y:s.y,curveNumber:s.curveNumber,pointNumber:s.pointNumber,pointIndex:s.pointIndex})})),n.a.setComponentValue(JSON.stringify(e))}},this.createMeasureLine=t=>{const e=Math.abs(t[1].x-t[0].x),s=Math.abs(t[1].y-t[0].y),a=Math.abs(t[1].z-t[0].z),i=Math.sqrt(Math.pow(e,2)+Math.pow(s,2)+Math.pow(a,2)),o=Math.sqrt(e*e+s*s),r=Math.sqrt(e*e+a*a),n=Math.sqrt(s*s+a*a);return[{x:[...t[0].x,...t[1].x],y:[...t[0].y,...t[1].y],z:[...t[0].z,...t[1].z],mode:"lines",line:{color:"purple",width:this.state.measureLineWidth},type:"scatter3d",name:"Distance",text:["Point 1","Point 2"],hovertemplate:"<b>%{text}</b><br>"+"<b>Measured distance: ".concat(i.toFixed(3),"m</b><br>")+"<b>\u0394XY: ".concat(o.toFixed(3),"</b><br>")+"<b>\u0394XZ: ".concat(r.toFixed(3),"</b><br>")+"<b>\u0394YZ: ".concat(n.toFixed(3),"</b><extra></extra>")},{x:[...t[0].x,...t[1].x],y:[...t[0].y,...t[0].y],z:[...t[0].z,...t[0].z],mode:"lines",line:{color:"red",width:this.state.measureLineWidth},type:"scatter3d",name:"Distance X",text:["Point 1","Point 2"],hovertemplate:"<b>Measured distance X: ".concat(e.toFixed(3),"m</b><extra></extra>")},{x:[...t[1].x,...t[1].x],y:[...t[0].y,...t[1].y],z:[...t[0].z,...t[0].z],mode:"lines",line:{color:"green",width:this.state.measureLineWidth},type:"scatter3d",name:"Distance Y",text:["Point 1","Point 2"],hovertemplate:"<b>Measured distance Y: ".concat(s.toFixed(3),"m</b><extra></extra>")},{x:[...t[1].x,...t[1].x],y:[...t[1].y,...t[1].y],z:[...t[0].z,...t[1].z],mode:"lines",line:{color:"blue",width:4},type:"scatter3d",name:"Distance Z",text:["Point 1","Point 2"],hovertemplate:"<b>Measured distance X: ".concat(a.toFixed(3),"m</b><extra></extra>")}]},this.updatePlotState=t=>{this.setState({data:t.data})}}componentDidMount(){let t=JSON.parse(this.props.args.plot_obj),e=this.props.args.measure_mode,s=this.props.args.measure_line_width;this.setState({data:t.data,layout:{uirevision:"constant"},clickedPoints:{x:0,y:0,z:0},measureMode:e,measurePoints:[],measureLineWidth:s})}}var l=Object(n.c)(h);r.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(l,null)),document.getElementById("root"))},6:function(t,e,s){t.exports=s(19)}},[[6,1,2]]]);
//# sourceMappingURL=main.95ecc0a7.chunk.js.map